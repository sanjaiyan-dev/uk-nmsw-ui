---
kind: pipeline
type: kubernetes
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: sync_dev_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: DEV_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: DEV_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: dev
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    branch:
    - version-*
    event:
    - push

- name: sync_staging_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: STAGING_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: staging
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - staging

- name: sync_production_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: production
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - production

- name: unit_test
  pull: always
  image: node:18-alpine
  commands:
  - npm ci
  - npm run test
  when:
    event:
    - push
    - tag

- name: sonarqube_scan
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/sonar-scanner:latest
  when:
    event:
    - push
    - tag

- name: build_container_image
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
    - ./extract-env-vars.sh ./helm/dev.yaml ./.env
    - cat ./.env
    - export $(cat ./.env | xargs)
    - export NMSW_MAINTENANCE=REPLACE_NMSW_MAINTENANCE
    - /usr/local/bin/wait
    - docker build -t nmsw-ui:$${DRONE_COMMIT_SHA} .
  when:
    branch:
    - main
    - version-*
    - cicd/*
    event:
    - push
    - tag

- name: vulnerability_scan
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  environment:
    IMAGE_NAME: nmsw-ui:${DRONE_COMMIT_SHA}
    LOCAL_IMAGE: true
    TOLERATE: low
    WHITELIST_FILE: whitelist
  when:
    branch:
    - main
    - version-*
    - cicd/*
    event:
    - push
  depends_on:
    - build_container_image

- name: dev_image_to_quay
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_PASSWORD:
      from_secret: NMSW_QUAY_PASSWORD
    DOCKER_USERNAME: ukhomeofficedigital+nmsw_ui
    REGISTRY: quay.io
    REPO: quay.io/ukhomeofficedigital/nmsw-ui
  commands:
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $${REGISTRY}
  - docker tag nmsw-ui:$${DRONE_COMMIT_SHA} $${REPO}:dev && docker tag nmsw-ui:$${DRONE_COMMIT_SHA} $${REPO}:$${DRONE_COMMIT_SHA}
  - docker push $${REPO}:dev
  - docker push $${REPO}:$${DRONE_COMMIT_SHA}
  when:
    branch:
    - version-*
    - cicd/*
    event:
    - push
  depends_on:
  - unit_test
  - sonarqube_scan
  - build_container_image
  - vulnerability_scan

- name: release_tag_image_to_quay
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_PASSWORD:
      from_secret: NMSW_QUAY_PASSWORD
    DOCKER_USERNAME: ukhomeofficedigital+nmsw_ui
    REGISTRY: quay.io
    REPO: quay.io/ukhomeofficedigital/nmsw-ui
  commands:
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $${REGISTRY}
  - docker tag nmsw-ui:$${DRONE_COMMIT_SHA} $${REPO}:$${DRONE_COMMIT_SHA} && docker tag nmsw-ui:$${DRONE_COMMIT_SHA} $${REPO}:$${DRONE_TAG}
  - docker push $${REPO}:$${DRONE_COMMIT_SHA}
  - docker push $${REPO}:$${DRONE_TAG}
  when:
    event:
    - tag
  depends_on:
  - unit_test
  - sonarqube_scan
  - vulnerability_scan
  - build_container_image

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/helm:latest
  commands:
  - ./helm/decrypt-secrets.sh dev
  - /run-helm.sh list -n nmsw-dev
  - helm upgrade --install nmsw-ui ./helm -f ./helm/dev.yaml -n nmsw-dev --wait --timeout 6m
  environment:
    KUBE_CERTIFICATE_AUTHORITY_DATA:
      from_secret: DEV_NMSW_KUBE_CA_DATA
    KUBE_CLUSTER_NAME:
      from_secret: DEV_NMSW_KUBE_CLUSTER_NAME
    KUBE_SERVER:
      from_secret: DEV_NMSW_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: DEV_NMSW_KUBE_TOKEN
    GPG_KEY:
      from_secret: DEV_NMSW_GPG_KEY
  when:
    branch:
    - version-*
    - cicd/*
    event:
    - push
  depends_on:
  - sync_dev_secrets
  - dev_image_to_quay

- name: build_container_image_staging
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
    - ./extract-env-vars.sh ./helm/staging.yaml ./.env
    - cat ./.env
    - export $(cat ./.env | xargs)
    - export NMSW_MAINTENANCE=REPLACE_NMSW_MAINTENANCE
    - /usr/local/bin/wait
    - docker build -t nmsw-ui:staging-$${DRONE_COMMIT_SHA} .
  when:
    event:
    - promote
    target:
    - staging

- name: vulnerability_scan_staging
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  environment:
    IMAGE_NAME: nmsw-ui:staging-${DRONE_COMMIT_SHA}
    LOCAL_IMAGE: true
    TOLERATE: low
    WHITELIST_FILE: whitelist
  when:
    event:
    - promote
    target:
    - staging
  depends_on:
  - build_container_image_staging

- name: image_to_quay_staging
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_PASSWORD:
      from_secret: NMSW_QUAY_PASSWORD
    DOCKER_USERNAME: ukhomeofficedigital+nmsw_ui
    REGISTRY: quay.io
    REPO: quay.io/ukhomeofficedigital/nmsw-ui
  commands:
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $${REGISTRY}
  - docker tag nmsw-ui:staging-$${DRONE_COMMIT_SHA} $${REPO}:staging-$${DRONE_COMMIT_SHA}
  - docker push $${REPO}:staging-$${DRONE_COMMIT_SHA}
  when:
    event:
    - promote
    target:
    - staging
  depends_on:
  - build_container_image_staging
  - vulnerability_scan_staging

- name: deploy_to_staging
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/helm:latest
  commands:
  - ./helm/decrypt-secrets.sh staging
  - /run-helm.sh list -n nmsw-staging
  - helm upgrade --install nmsw-ui ./helm -f ./helm/staging.yaml -n nmsw-staging --set image.tag="staging-${DRONE_COMMIT_SHA}" --wait --timeout 6m
  environment:
    KUBE_CERTIFICATE_AUTHORITY_DATA:
      from_secret: STAGING_NMSW_KUBE_CA_DATA
    KUBE_CLUSTER_NAME:
      from_secret: STAGING_NMSW_KUBE_CLUSTER_NAME
    KUBE_SERVER:
      from_secret: STAGING_NMSW_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: STAGING_NMSW_KUBE_TOKEN
    GPG_KEY:
      from_secret: STAGING_NMSW_GPG_KEY
  when:
    event:
    - promote
    target:
    - staging
  depends_on:
  - sync_staging_secrets
  - image_to_quay_staging

- name: build_container_image_production
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
    - ./extract-env-vars.sh ./helm/production.yaml ./.env
    - cat ./.env
    - export $(cat ./.env | xargs)
    - export NMSW_MAINTENANCE=REPLACE_NMSW_MAINTENANCE
    - /usr/local/bin/wait
    - docker build -t nmsw-ui:production-$${DRONE_COMMIT_SHA} .
  when:
    event:
    - promote
    target:
    - production

- name: vulnerability_scan_production
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  environment:
    IMAGE_NAME: nmsw-ui:production-${DRONE_COMMIT_SHA}
    LOCAL_IMAGE: true
    TOLERATE: low
    WHITELIST_FILE: whitelist
  when:
    event:
    - promote
    target:
    - production
  depends_on:
  - build_container_image_production

- name: image_to_quay_production
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_PASSWORD:
      from_secret: NMSW_QUAY_PASSWORD
    DOCKER_USERNAME: ukhomeofficedigital+nmsw_ui
    REGISTRY: quay.io
    REPO: quay.io/ukhomeofficedigital/nmsw-ui
  commands:
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $${REGISTRY}
  - docker tag nmsw-ui:production-$${DRONE_COMMIT_SHA} $${REPO}:production-$${DRONE_COMMIT_SHA}
  - docker push $${REPO}:production-$${DRONE_COMMIT_SHA}
  when:
    event:
    - promote
    target:
    - production
  depends_on:
  - build_container_image_production
  - vulnerability_scan_production

- name: deploy_to_production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/helm:latest
  commands:
  - ./helm/decrypt-secrets.sh production
  - /run-helm.sh list -n nmsw
  - helm upgrade --install nmsw-ui ./helm -f ./helm/production.yaml -n nmsw --set image.tag="production-${DRONE_COMMIT_SHA}" --wait --timeout 6m
  environment:
    KUBE_CERTIFICATE_AUTHORITY_DATA:
      from_secret: PRODUCTION_NMSW_KUBE_CA_DATA
    KUBE_CLUSTER_NAME:
      from_secret: PRODUCTION_NMSW_KUBE_CLUSTER_NAME
    KUBE_SERVER:
      from_secret: PRODUCTION_NMSW_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PRODUCTION_NMSW_KUBE_TOKEN
    GPG_KEY:
      from_secret: PRODUCTION_NMSW_GPG_KEY
  when:
    event:
    - promote
    target:
    - production
  depends_on:
  - sync_production_secrets
  - image_to_quay_production

- name: notify
  pull: if-not-exists
  image: plugins/slack
  failure: ignore
  settings:
    channel: nmsw-deployments
    template: "{{#build.deployTo}}\n  *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*\n  {{build.link}}\n{{else}}\n  *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*\n  {{build.link}}\n{{/build.deployTo}}\n"
    username: Drone Build Watcher
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    branch:
    - main
    - version-*
    event:
    - promote
    - push
    - tag
    status:
    - success
    - failure

services:
- name: docker
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

- name: anchore-submission-server
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  commands:
  - /run.sh server
---
kind: pipeline
type: kubernetes
name: cypress-test

platform:
  os: linux
  arch: amd64

steps:
- name: dev_cypress_test
  pull: if-not-exists
  image: cypress/included:latest
  environment:
    CYPRESS_MAIL_API_KEY:
      from_secret: CYPRESS_MAIL_API_KEY
  commands:
  - ./extract-env-vars.sh ./helm/dev.yaml cypress-env.sh
  - cat ./cypress-env.sh
  - export $(cat ./cypress-env.sh | xargs)
  - >-
    apt-get update && apt-get install -y curl;
    curl -O https://github.com/cucumber/json-formatter/releases/download/v19.0.0/cucumber-json-formatter-linux-amd64;
    mv ./cucumber-json-formatter-linux-amd64 /usr/local/bin/cucumber-json-formatter;
    chmod +x /usr/local/bin/cucumber-json-formatter
  - >-
    echo "Chrome version:  $(google-chrome --version 2>/dev/null || echo "")\n"\
    "Firefox version: $(firefox --version 2>/dev/null || echo "")\n"\
    "Edge version:    $(edge --version 2>/dev/null || echo "")\n"
  - ./drone-cypress-test-script.sh dev
  when:
    branch:
    - version-*
    - cypress-drone
    event:
    - push
  failure: ignore

- name: staging_cypress_test
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-cypress:12.2.0-node18
  environment:
    CYPRESS_MAIL_API_KEY:
      from_secret: STAGING_NMSW_MAILSLURP_API_KEY
  commands:
  - ./extract-env-vars.sh ./helm/staging.yaml cypress-env.sh
  - cat ./cypress-env.sh
  - export $(cat ./cypress-env.sh | xargs)
  - >-
    apt-get update && apt-get install -y procps curl;
    curl -O https://github.com/cucumber/json-formatter/releases/download/v19.0.0/cucumber-json-formatter-linux-amd64;
    mv ./cucumber-json-formatter-linux-amd64 /usr/local/bin/cucumber-json-formatter;
    chmod +x /usr/local/bin/cucumber-json-formatter
  - ./drone-cypress-test-script.sh staging
  when:
    event:
    - promote
    target:
    - staging
  failure: ignore

- name: production_cypress_test
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-cypress:12.2.0-node18
  environment:
    CYPRESS_MAIL_API_KEY:
      from_secret: PRODUCTION_NMSW_MAILSLURP_API_KEY
  commands:
  - ./extract-env-vars.sh ./helm/production.yaml cypress-env.sh
  - cat ./cypress-env.sh
  - export $(cat ./cypress-env.sh | xargs)
  - >-
    apt-get update && apt-get install -y procps curl;
    curl -O https://github.com/cucumber/json-formatter/releases/download/v19.0.0/cucumber-json-formatter-linux-amd64;
    mv ./cucumber-json-formatter-linux-amd64 /usr/local/bin/cucumber-json-formatter;
    chmod +x /usr/local/bin/cucumber-json-formatter
  - ./drone-cypress-test-script.sh production
  when:
    event:
    - promote
    target:
    - production
  failure: ignore
...
